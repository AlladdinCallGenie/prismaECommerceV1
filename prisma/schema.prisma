// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  username     String
  email        String   @unique
  first_name   String
  last_name    String
  password     String
  isDeleted    Boolean  @default(false)
  createdAt    DateTime @default(now())
  last_login   DateTime @updatedAt
  refreshToken String?
  accessToken  String?

  role          Role           @default(CUSTOMER)
  user_address  User_address[]
  order_table   Order_table[]
  shopping_cart Shopping_cart?
}

enum Role {
  ADMIN
  CUSTOMER
}

model User_address {
  address_id Int @id @default(autoincrement())
  userId     Int

  address_line1      String
  address_line2      String?
  city               String
  state              String
  postal_code        Int
  country            String
  isShipping_address Boolean @default(false)
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  order_table Order_table[]
}

model Products {
  product_id    Int           @id @default(autoincrement())
  category_id   Int
  product_name  String        @unique
  product_price Float
  description   String
  stock         Int
  discount      Float?
  image         String
  isActive      Boolean       @default(true)
  isDeleted     Boolean       @default(false)
  isDeletedAt   DateTime?
  cart_items    Cart_items[]
  order_items   Order_items[]
  category      Category      @relation(fields: [category_id], references: [id], onDelete: Cascade)
}

model Category {
  id       Int        @id @default(autoincrement())
  name     String     @unique
  products Products[]
}

model Shopping_cart {
  cart_id   Int      @id @default(autoincrement())
  userId    Int      @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user       User         @relation(fields: [userId], references: [id])
  cart_items Cart_items[]
}

model Cart_items {
  cart_item_id Int   @id @default(autoincrement())
  cart_id      Int
  product_id   Int
  quantity     Int
  price        Float

  products      Products      @relation(fields: [product_id], references: [product_id])
  shopping_cart Shopping_cart @relation(fields: [cart_id], references: [cart_id], onDelete: Cascade)
}

model Order_table {
  order_id           Int           @id @default(autoincrement())
  userId             Int
  shippingAddress_id Int
  order_date         DateTime      @default(now())
  total_amount       Float
  discount_amount    Float?
  final_amount       Float?
  status             Status        @default(PENDING)
  user               User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  user_address       User_address  @relation(fields: [shippingAddress_id], references: [address_id], onDelete: Cascade)
  order_items        Order_items[]
  couponId           Int?
  coupon             Coupon?       @relation(fields: [couponId], references: [id])
}

enum Status {
  PENDING
  SHIPPED
  DELIVERED
  CANCELLED
}

model Order_items {
  order_item_id Int   @id @default(autoincrement())
  order_id      Int
  product_id    Int
  quantity      Int
  price         Float

  order_table Order_table @relation(fields: [order_id], references: [order_id])
  products    Products    @relation(fields: [product_id], references: [product_id])
}

model Coupon {
  id            Int          @id @default(autoincrement())
  code          String       @unique
  description   String?
  discountType  DiscountType // PERCENTAGE or FIXED
  discountValue Float
  minOrderValue Float? // optional: min order value to apply coupon
  maxDiscount   Float? // optional: cap for percentage discounts
  validFrom     DateTime     @default(now())
  validTo       DateTime
  isActive      Boolean      @default(true)

  // One coupon can be applied to many orders
  orders Order_table[]
}

enum DiscountType {
  PERCENTAGE
  FIXED
}
